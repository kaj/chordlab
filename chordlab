#! /usr/bin/env python
# -*- coding: utf-8 -*-
author = "Rasmus Kaj <kaj@stacken.kth.se>"
license = author + """ wrote this program.
As long as you retain this notice you can do whatever you want with this
stuff.  If we meet some day, and you think this stuff is worth it, you
can buy me a beer in return."""
version = '0.1+'
progurl = 'http://rasmus.krats.se/2008/chordlab/'

from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4

class CanvasAdapter(canvas.Canvas) :
    "My convenience adapter for the reportlab canvas."
    
    def __init__(self, filename, pagesize=A4, margin=50, showfilenames=False,
                 duplex=True, title=None, author=None):
        canvas.Canvas.__init__(self, filename, pagesize=pagesize)
        
        self.setTitle(title or 'Songbook')
        
        # reportlab doesn't provide a nicer interface to this (yet)
        self._doc.setAuthor(author or self._guess_author())
        
        # reportlab doesn't provide a nicer interface to this (yet)
        self._doc.info.producer = 'Chordlab ' + version + '\n' + progurl
        
        self.pagesize = pagesize
        self.margin = margin
        self.showfilenames = showfilenames
        self.duplex = duplex
        self.pageno = 0
        self.top = self.pagesize[1] - 0.4*self.margin
        self.bottom = 0.62*self.margin
        self.left = 0.5 * self.margin
        self.right = self.pagesize[0] - 1.5 * self.margin

    def _guess_author(self):
        try:
            import pwd, socket, os
            pw = pwd.getpwuid(os.getuid())
            realname = pw.pw_gecos.split(',')[0];
            mailaddr = os.environ.get('MAILADDR')
            if not mailaddr:
                logname = os.environ.get('LOGNAME') or pw.pw_name
                mailaddr = logname + '@' + socket.gethostname()
            return u'%s <%s>' % (realname, mailaddr)
        except:
            print "WARNING: Could not determine author name"
            return None
        
    def newPage(self, filename) :
        if self.pageno > 0: self.showPage()
        self.pageno += 1
        if self.duplex and (self.pageno % 2 == 1):
            self.left = 1.5 * self.margin
            self.right = self.pagesize[0] - 0.5 * self.margin
            self.setFont('Times-Roman', 9)
            self.drawRightString(self.right, self.bottom - 9, str(self.pageno))
        else:
            self.left = 0.5 * self.margin
            self.right = self.pagesize[0] - 1.5 * self.margin
            self.setFont('Times-Roman', 9)
            self.drawString(self.left, self.bottom - 9, str(self.pageno))
        self.line(self.left, self.top, self.right, self.top)
        self.line(self.left, self.bottom, self.right, self.bottom)
        if self.showfilenames:
            self.setFont('Helvetica', 8)
            if self.duplex and (self.pageno % 2 == 1):
                self.drawString(self.left, self.bottom - 9, filename)
            else:
                self.drawRightString(self.right, self.bottom - 9, filename)
                
        return (self.left, self.top)
    
    def get_left(self) :
        "Get left start of drawable area"
        return self.left

    def get_right(self) :
        "Get right end of drawable area"
        return self.right

    def get_top(self) :
        "Get top start of drawable area"
        return self.top

    def get_bottom(self) :
        "Get top end of drawable area"
        return self.bottom

def getUnitFactor(name, default=1):
    from reportlab.lib.units import toLength
    if name:
        return toLength('1' + name);
    else:
        return default

def getPageSize(descr):
    import reportlab.lib.pagesizes
    if descr.upper() in dir(reportlab.lib.pagesizes):
        return reportlab.lib.pagesizes.__getattribute__(descr.upper())
    else:
        import re
        unit = '(cm|in|pt|i|mm|pica)';
        pformat = re.compile("^(\d+) ?"+unit+"? ?(x|by)(\d+) ?"+unit+"?$")
        m = pformat.match(descr)
        if m:
            yunit = getUnitFactor(m.group(5))
            xunit = getUnitFactor(m.group(2), default=yunit)
            return (float(m.group(1))*xunit, float(m.group(4))*yunit)
        else:
            return None;

from copy import copy
from optparse import Option, OptionValueError

def check_pagesize(option, opt, value):
    result = getPageSize(value)
    if result != None:
        return result
    else:
        raise OptionValueError("option %s: invalid page size: %r"
                               % (opt, value))

class MyOption(Option):
    """Option class with common option support and an added pagesize type"""
    TYPES = Option.TYPES + ("pagesize",)
    TYPE_CHECKER = copy(Option.TYPE_CHECKER)
    TYPE_CHECKER["pagesize"] = check_pagesize
    
from optparse import OptionParser

description = """Takes a set of chopro files and converts them to a single
pdf file.  If no file names are given as arguments, a single chopro files
is read from stdin.  Chopro files is simply text files with chord names in
brackets and some other options in braces, on separate lines."""

opt = OptionParser(usage="usage: %prog [options] file.chopro ...",
                   version="%prog " + version + " by " + author,
                   description=description,
                   epilog=license + '\n\n' + progurl,
                   option_class=MyOption)
opt.add_option("-o", "--output", dest="output", default="chords.pdf",
               help="output file to write [default: %default]", metavar="FILE")
opt.add_option("-p", "--pagesize", dest="pagesize", type="pagesize",
               default="A4", metavar="SZ",
               help="output page size, name or dimensions [default: %default]")
opt.add_option("--title", dest="doctitle", metavar="TITLE",
               help="document title to put in PDF metadata")
opt.add_option("--author", dest="docauthor", metavar="AUTHOR",
               help="author name/address to put in PDF metadata")
opt.add_option("--showfilenames",
               action="store_true", dest="showfiles", default=False,
               help="Show source filenames in output")
opt.add_option("--no-compact",
               action="store_true", dest="disable_compact", default=False,
               help="Make place for chords even on lines w/o chords")
opt.add_option("--no-grid",
               action="store_true", dest="disable_grid", default=False,
               help="Don't draw the chord grids")

(options, sourcefiles) = opt.parse_args()

usedchords = set()

knownchords = {
    'Ab':    [4,  1, 3, 3, 2, 1, 1],
    'Abm':   [4,  1, 3, 3, 1, 1, 1],
    'Ab6':   [1,  4, 3, 1, 1, 1, 1],
    'Ab7':   [4,  1, 3, 1, 2, 1, 1],
    'Abm7':  [4,  1, 3, 1, 1, 1, 1],
    'Abmaj7': [4, 1, 3, 2, 2, 1, 1],
    'A':     [1,  None, 0, 2, 2, 2, 0],
    'Am':    [1,  None, 0, 2, 2, 1, 0],
    'Am6':   [1,  None, 0, 2, 2, 1, 2],
    'Am9':   [5,  1, 3, 1, 1, 1, 3],
    'Am/C':  [1,  None, 3, 2, 2, 1, 0],
    'Am/E':  [1,  0, 0, 2, 2, 1, 0],
    'Am/F#': [1,  2, 0, 2, 2, 1, 0],
    'Am/G':  [1,  3, 0, 2, 2, 1, 0],
    'A6':    [1,  None, 0, 2, 2, 2, 2],
    'A7':    [1,  None, 0, 2, 0, 2, 0],
    'A7/C#': [4,  None, 1, 2, 3, 2, 2],
    'A9':    [4,  2, 1, 2, 1, 2, None],
    'Am7':   [1,  None, 0, 2, 0, 1, 0],
    'Am7/G': [1,  3, 0, 2, 0, 1, 0],
    'Amaj7': [1,  None, 0, 2, 1, 2, 0],
    'Asus':  [1,  None, 0, 2, 2, 3, 0],
    'Asus2': [1,  None, 0, 2, 2, 0, 0],
    'Asus4': [1,  None, 0, 0, 2, 3, 0],
    'A/B':   [1,  None, 2, 2, 2, 2, 0],
    'A/G':   [1,  3, 0, 2, 2, 2, 0],
    'Bb':    [1,  None, 1, 3, 3, 3, 1],
    'Bbm':   [1,  None, 1, 3, 3, 2, 1],
    'Bb7':   [1,  None, 1, 3, 1, 3, 1],
    'Bbm7':  [1,  None, 1, 3, 1, 2, 1],
    'Bb9':   [1,  None, 1, 0, 1, 1, 1],
    'Bb/E':  [1,  0, 1, 3, 3, 3, 1],
    'Bb/D':  [1,  None, None, 0, 2, 2, 1],
    'B':     [2,  None, 1, 3, 3, 3, 1],
    'Bm':    [2,  None, 1, 3, 3, 2, 1],
    'Bm/F#': [2,  1, 1, 3, 3, 2, 1],
    'Bm/G#': [4,  1, 2, 1, 4, 4, 4],
    'B6':    [2,  None, 1, 3, 3, 3, 3],
    'B7':    [2,  None, 1, 3, 1, 3, 1],
    'B7/F#': [1,  2, 2, 1, 2, 0, None],
    'Bm7':   [2,  None, 1, 3, 1, 2, 1],
    'Bmaj7': [2,  None, 1, 3, 2, 3, 1],
    'Bsus4': [2,  None, 1, 1, 3, 4, 1],
    'Bdim':  [1,  None, 2, 3, 4, 3, None],
    'H':     [2,  None, 1, 3, 3, 3, 1],
    'Hm':    [2,  None, 1, 3, 3, 2, 1],
    'H7':    [2,  None, 1, 3, 1, 3, 1],
    'Hm7':   [2,  None, 1, 3, 1, 2, 1],
    'C':     [1,  None, 3, 2, 0, 1, 0],
    'C/B':   [1,  None, 2, 2, 0, 1, 0],
    'C/D':   [1,  None, None, 0, 0, 1, 0],
    'C/G':   [1,  3, 3, 2, 0, 1, 0],
    'C6':    [1,  None, 3, 2, 2, 1, 0],
    'C7':    [1,  None, 3, 2, 3, 1, 0],
    'C7sus4': [1, None, 3, 3, 3, 1, 1],
    'Cm':    [3,  None, 1, 3, 3, 2, 1],
    'Cm7':   [3,  None, 1, 3, 1, 2, 1],
    'Cmaj7': [1,  None, 3, 2, 0, 0, 0],
    'Cdim':  [3,  None, 1, 2, 3, 2, None],
    'Csus4': [1,  None, 3, 3, 0, 1, 1],
    'C/E':   [1,  0, 3, 2, 0, 1, 0],
    'C#':    [4,  None, 1, 3, 3, 3, 1],
    'C#7':   [4,  None, 1, 3, 1, 3, 1],
    'C#m':   [4,  None, 1, 3, 3, 2, 1],
    'C#m7':  [4,  None, 1, 3, 1, 2, 1],
    'C#sus4': [1, None, 4, 4, 1, 2, 2],
    'Db':    [1,  None, 4, 3, 1, 2, 1],
    'D':     [1,  None, None, 0, 2, 3, 2],
    'Dm':    [1,  None, None, 0, 2, 3, 1],
    'D7':    [1,  None, None, 0, 2, 1, 2],
    'Dmaj7': [1,  None, None, 0, 2, 2, 2],
    'Dm7':   [1,  None, None, 0, 2, 1, 1],
    'Dsus4': [1,  None, None, 0, 2, 3, 3],
    'D/A':   [1,  None, 0, 0, 2, 3, 2],
    'D/F#':  [1,  2, 0, 0, 2, 3, 2],
    'D#dim': [1,  None, None, 1, 2, 4, 2],
    'Eb':    [3,  None, 4, 3, 1, 2, 1],
    'Ebm':   [1,  None, None, 1, 3, 4, 2],
    'Eb7':   [1,  None, None, 1, 0, 2, 3],
    'E':     [1,  0, 2, 2, 1, 0, 0],
    'Em':    [1,  0, 2, 2, 0, 0, 0],
    'E7':    [1,  0, 2, 2, 1, 3, 0],
    'E9':    [1,  0, 2, 0, 1, 0, 2],
    'Em6':   [1,  0, 2, 2, 0, 2, 0],
    'Em7':   [1,  0, 2, 2, 0, 3, 0],
    'Emaj7': [1,  0, 2, 1, 1, 0, 0],
    'Eadd9': [1,  0, 2, 2, 1, 3, 3],
    'Esus4': [1,  0, 0, 2, 2, 0, 0],
    'E/G#':  [1,  None, None, None, 1, 0, 0],
    'F':     [1,  1, 3, 3, 2, 1, 1],
    'Fm':    [1,  1, 3, 3, 1, 1, 1],
    'F7':    [1,  1, 3, 1, 2, 1, 1],
    'F/A':   [1,  None, 0, 3, 2, 1, 1],
    'Fmaj7': [1,  1, 3, 2, 2, 1, 1],
    'Fsus4': [1,  1, 1, 3, 3, 1, 1],
    'F#':    [2,  1, 3, 3, 2, 1, 1],
    'F#m':   [2,  1, 3, 3, 1, 1, 1],
    'F#7':   [2,  1, 3, 1, 2, 1, 1],
    'F#m7':  [2,  1, 3, 1, 1, 1, 1],
    # 'F#dim': [1,  2, 3, 4, 2, None, None],
    'F#dim': [1,  None, None, 4, 2, 1, 2],
    'G':     [1,  3, 2, 0, 0, 0, 3],
    'G+':    [1,  3, 2, 1, 0, 0, 3],
    'G6':    [1,  3, 2, 0, 0, 0, 0],
    'G7':    [1,  3, 2, 0, 0, 0, 1],
    'G7/D':  [1,  None, None, 0, 0, 0, 1],
    'Gm':    [3,  1, 3, 3, 1, 1, 1],
    'Gm6':   [1,  3, 1, 0, 0, 3, 0],
    'Gm7':   [3,  1, 3, 1, 1, 1, 1],
    'Gmaj7': [1,  3, 2, 0, 0, 0, 2],
    'Gsus4': [1,  3, 3, 0, 0, 3, 3],
    'G/A':   [1,  None, 0, 0, 0, 0, 3],
    'G/B':   [1,  None, 2, 0, 0, 3, 3],
    'G/C':   [1,  None, 3, 0, 0, 0, 3],
    'G/F':   [1,  1, 2, 0, 0, 3, 3],
    'G#':    [4,  1, 3, 3, 2, 1, 1],
    'G#7':   [4,  1, 3, 1, 2, 1, 1],
    'G#m':   [4,  1, 3, 3, 1, 1, 1],
    'G#m7':  [4,  1, 3, 1, 1, 1, 1],
    'G#dim': [4,  1, 2, 3, 1, None, None],
}
localchords = {}

def stringValue(v):
    if v in ('-', 'X', 'x'):
        return None
    else:
        return int(v)

def defineChord(name, *args):
    if args[0] == 'base-fret' and args[2] == 'frets':
        base_fret = int(args[1])
        localchords[name] = [base_fret] + map(stringValue, args[3:])
    else:
        warn("Bad chorddef " + name + ": " + str(args))

def drawChordBox(c, xpos, ypos, chord) :
    dx = 5
    dy = 7
    
    c.saveState()
    clip = c.beginPath()
    clip.moveTo(xpos - dx,   ypos - dy/2)
    clip.lineTo(xpos + 6*dx, ypos - dy/2)
    clip.lineTo(xpos + 6*dx, ypos + 4*dy + 1)
    clip.lineTo(xpos - dx,   ypos + 4*dy + 1)
    clip.close()
    c.clipPath(clip, stroke=0)            # clipPath
    
    c.setLineWidth(0.3)
    c.grid([xpos + dx*x for x in range(6)], [ypos + dy*y for y in range(-1, 6)])
    c.restoreState()

    c.setFont("Helvetica-Oblique", 10)
    c.drawCentredString(xpos + dx*2.5, ypos + 5.1*dy, chord)
    
    the_chord = localchords.get(chord) or knownchords.get(chord)
    
    if the_chord != None:
        c.setFont("Helvetica", 7)
        if the_chord[0] > 1: # bare
            c.drawRightString(xpos-2.0*dx/5, ypos + 3*dy+1, str(the_chord[0]))
        else:
            c.setLineWidth(1)
            c.line(xpos, ypos+4*dy+0.5, xpos + 5*dx, ypos+4*dy+0.5)
        x = xpos;
        for string in the_chord[1:]:
            if string == None:
                c.drawCentredString(x, ypos + 4*dy + 1.7, 'x')
            elif string == 0:
                c.drawCentredString(x, ypos + 4*dy + 1.7, 'o')
            else:
                c.circle(x, ypos + (4.5-string)*dy, 2.0*dx/5, stroke=0, fill=1)
        
            x += dx

skip_grid = options.disable_grid

def drawChordBoxes(c) :
    global skip_grid
    if skip_grid:
        skip_grid = options.disable_grid
        return
    boxw = 38
    global usedchords
    xpos = c.get_right() - boxw + 10
    ypos = c.get_bottom() + 8
    for chord in reversed(sorted(usedchords)):
        drawChordBox(c, xpos, ypos, chord);
        xpos -= boxw
        if xpos < c.get_left():
            xpos = c.get_right() - boxw + 10
            ypos += 55
    usedchords = set()
    
def useChord(chord) :
    global usedchords
    p = re.compile('\(.*\)')
    chord = p.sub('', chord)
    if not (chord in ['N.C.', '%', '-', ''] or chord in usedchords):
        usedchords.add(chord)
        if not (knownchords.has_key(chord) or localchords.has_key(chord)) :
            warn("Unknown chord: " + chord)

def newSong(c) :
    drawChordBoxes(c)
    global localchords
    localchords = {}
    global prevfile
    prevfile = fileinput.filename()
    (x, y) = c.newPage(prevfile)
    global colw
    colw = c.get_right() # Any large number, really
    return (x, y)

# -- main --
c = CanvasAdapter(options.output, showfilenames=options.showfiles,
                  pagesize=options.pagesize,
                  title=options.doctitle, author=options.docauthor)

import re
statement = re.compile(r'\s*{([a-z_]+)(?::?\s*(.*))?}\s*', re.I)
chordre = re.compile('\[([^]]*)\]')

socpos = [0,0]


import fileinput

colstart = 0

def doColumnBreak() :
    global xpos
    global ypos
    global colstart
    ypos = colstart
    xpos += colw
    if (xpos + 1 > c.get_right()) :
        (xpos, ypos) = c.newPage(fileinput.filename())
    global tabmode
    if tabmode:
        c.setFont("Courier", 9);
        

def warn(msg) :
    print fileinput.filename() + ':' + str(fileinput.filelineno()), msg
    
tabmode = 0

def detect_encoding(default='utf-8'):
    """A hook for fileinput to detect encoding tags at start of each file."""
    def open_hook(filename, mode):
        import codecs, re
        f = open(filename, mode)
        # Check the two first lines for an encoding mark!
        coding = re.search(r'-\*- +(en)?coding: (?P<c>[a-z0-9_-]+) +-\*-', 
                           f.readline() + f.readline())
        f.close()
        return codecs.open(filename, mode,
                           coding.group('c') if coding else default)
    return open_hook

prevfile = None
for line in fileinput.input(sourcefiles, 
                            openhook=detect_encoding(default='iso-8859-1')):
    if prevfile != fileinput.filename():
        (xpos, ypos) = newSong(c)
        
    line = line.rstrip()
    m = statement.match(line)
    if m :
        stmt = m.group(1).lower();
        if stmt in ('t', 'title'):
            c.setFont("Times-Bold", 14);
            ypos -= 18
            c.drawCentredString((c.get_left() + c.get_right())/2, ypos,
                                m.group(2))
            
        elif stmt in ('st', 'subtitle'):
            c.setFont("Times-Roman", 12);
            ypos -= 14
            c.drawCentredString((c.get_left() + c.get_right())/2, ypos,
                                m.group(2))
            
        elif stmt in ('c', 'comment', 'ci'):
            c.setFont("Times-Italic", 10)
            ypos -= 12
            c.drawString(xpos, ypos, m.group(2))
            
        elif stmt in ('soc', 'start_of_chorus'):
            socpos = [xpos-5, ypos]
            xpos += 10
            
        elif stmt in ('eoc', 'end_of_chorus'):
            xpos -= 10
            c.line(socpos[0], socpos[1], xpos-5, ypos-5)

        elif stmt in ('sot'):
            c.setFont("Courier", 9);
            tabmode = 1
            
        elif stmt in ('eot'):
            tabmode = 0
            
        elif stmt in ('col', 'cols', 'columns'):
            coln = int(m.group(2))
            colw = (c.get_right() - c.get_left()) / coln
            colstart = ypos
            # print "Pagew:", A4[0] - 2*margin, "cols:", coln, "colw:", colw
            
        elif stmt in ('colb', 'column_break'):
            doColumnBreak()
                
        elif stmt in ('np', 'new_page'):
            (xpos, ypos) = c.newPage(fileinput.filename())
            
        elif stmt == 'new_song':
            (xpos, ypos) = newSong(c)
            
        elif stmt == 'define':
            defineChord(*m.group(2).split())
            
        elif stmt in ('ng', 'no_grid'):
            skip_grid = True
        
        else:
            warn("Unknown statement: %s param: '%s'" % (stmt, m.group(2)))
    
    elif len(line) == 0 :
        ypos -= 16
    
    elif line[0] == '#':
        pass
    
    elif tabmode:
        if ypos < c.get_bottom() + 12:
            doColumnBreak()
        ypos -= 9
        c.drawString(xpos, ypos, line)
        
    else:
        if ypos < c.get_bottom() + 24:
            doColumnBreak()
        parts = chordre.split(line)
        if options.disable_compact or len(parts) > 1:
            ypos -= 22
        else:
            ypos -= 12
        
        to = c.beginText(xpos, ypos)
        ischord = False
        inword = False
        okpos = 0
        for x in parts:
            if ischord :
                useChord(x)
                csp = to.getCursor()
                while csp[0] < okpos :
                    to.textOut(' ' if inword else u'\u00B7')
                    csp = to.getCursor()
                to.setFont("Helvetica-Oblique", 9)
                to.setRise(11)
                to.setFillGray(0.5)
            else:
                to.setFont("Times-Roman", 12)
                to.setRise(0)
                to.setFillGray(0)
            to.textOut(x)
            if ischord :
                okpos = to.getCursor()[0] + 3
                to.setTextOrigin(csp[0], csp[1])
            else:
                inword = x and x[-1] == ' '
            ischord = not(ischord);
        c.drawText(to)

drawChordBoxes(c)
c.showPage()
c.save()
